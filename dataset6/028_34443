int phar_split_fname(const char *filename, int filename_len, char **arch, int *arch_len, char **entry, int *entry_len, int executable, int for_create TSRMLS_DC){
 const char *ext_str;
#ifdef PHP_WIN32
 char *save;
#endif
 int ext_len;

 if (CHECK_NULL_PATH(filename, filename_len)){
  return FAILURE;
 }

 if (!strncasecmp(filename, "phar://", 7)){
  filename += 7;
  filename_len -= 7;
 }

 ext_len = 0;
#ifdef PHP_WIN32
 save = filename;
 filename = estrndup(filename, filename_len);
 phar_unixify_path_separators(filename, filename_len);
#endif
 if (phar_detect_phar_fname_ext(filename, filename_len, &ext_str, &ext_len, executable, for_create, 0 TSRMLS_CC) == FAILURE){
  if (ext_len != -1){
   if (!ext_str){

#ifdef PHP_WIN32
    *arch = save;
#else
    *arch = filename;
#endif
   }

#ifdef PHP_WIN32
   efree(filename);
#endif
   return FAILURE;
  }

  ext_len = 0;

 }

 *arch_len = ext_str - filename + ext_len;
 *arch = estrndup(filename, *arch_len);

 if (ext_str[ext_len]){
  *entry_len = filename_len - *arch_len;
  *entry = estrndup(ext_str+ext_len, *entry_len);
#ifdef PHP_WIN32
  phar_unixify_path_separators(*entry, *entry_len);
#endif
  *entry = phar_fix_filepath(*entry, entry_len, 0 TSRMLS_CC);
 } else{
  *entry_len = 1;
  *entry = estrndup("/", 1);
 }

#ifdef PHP_WIN32
 efree(filename);
#endif

 return SUCCESS;
}
