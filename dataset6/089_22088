static struct nfs4_lockdata *nfs4_alloc_lockdata(struct file_lock *fl,
  struct nfs_open_context *ctx, struct nfs4_lock_state *lsp,
  gfp_t gfp_mask){
 struct nfs4_lockdata *p;
 struct inode *inode = lsp->ls_state->inode;
 struct nfs_server *server = NFS_SERVER(inode);

 p = kzalloc(sizeof(*p), gfp_mask);
 if (p == NULL)
  return NULL;

 p->arg.fh = NFS_FH(inode);
 p->arg.fl = &p->fl;
 p->arg.open_seqid = nfs_alloc_seqid(&lsp->ls_state->owner->so_seqid, gfp_mask);
 if (p->arg.open_seqid == NULL)
  goto out_free;
 p->arg.lock_seqid = nfs_alloc_seqid(&lsp->ls_seqid, gfp_mask);
 if (p->arg.lock_seqid == NULL)
  goto out_free_seqid;
 p->arg.lock_stateid = &lsp->ls_stateid;
 p->arg.lock_owner.clientid = server->nfs_client->cl_clientid;
 p->arg.lock_owner.id = lsp->ls_seqid.owner_id;
 p->arg.lock_owner.s_dev = server->s_dev;
 p->res.lock_seqid = p->arg.lock_seqid;
 p->lsp = lsp;
 p->server = server;
 atomic_inc(&lsp->ls_count);
 p->ctx = get_nfs_open_context(ctx);
 memcpy(&p->fl, fl, sizeof(p->fl));
 return p;
out_free_seqid:
 nfs_free_seqid(p->arg.open_seqid);
out_free:
 kfree(p);
 return NULL;
}
