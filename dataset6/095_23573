struct buffer_head *udf_expand_dir_adinicb(struct inode *inode, int *block,
        int *err){
 int newblock;
 struct buffer_head *dbh = NULL;
 struct kernel_lb_addr eloc;
 uint8_t alloctype;
 struct extent_position epos;

 struct udf_fileident_bh sfibh, dfibh;
 loff_t f_pos = udf_ext0_offset(inode);
 int size = udf_ext0_offset(inode) + inode->i_size;
 struct fileIdentDesc cfi, *sfi, *dfi;
 struct udf_inode_info *iinfo = UDF_I(inode);

 if (UDF_QUERY_FLAG(inode->i_sb, UDF_FLAG_USE_SHORT_AD))
  alloctype = ICBTAG_FLAG_AD_SHORT;
 else
  alloctype = ICBTAG_FLAG_AD_LONG;

 if (!inode->i_size){
  iinfo->i_alloc_type = alloctype;
  mark_inode_dirty(inode);
  return NULL;
 }


 *block = udf_new_block(inode->i_sb, inode,
          iinfo->i_location.partitionReferenceNum,
          iinfo->i_location.logicalBlockNum, err);
 if (!(*block))
  return NULL;
 newblock = udf_get_pblock(inode->i_sb, *block,
      iinfo->i_location.partitionReferenceNum,
    0);
 if (!newblock)
  return NULL;
 dbh = udf_tgetblk(inode->i_sb, newblock);
 if (!dbh)
  return NULL;
 lock_buffer(dbh);
 memset(dbh->b_data, 0x00, inode->i_sb->s_blocksize);
 set_buffer_uptodate(dbh);
 unlock_buffer(dbh);
 mark_buffer_dirty_inode(dbh, inode);

 sfibh.soffset = sfibh.eoffset =
   f_pos & (inode->i_sb->s_blocksize - 1);
 sfibh.sbh = sfibh.ebh = NULL;
 dfibh.soffset = dfibh.eoffset = 0;
 dfibh.sbh = dfibh.ebh = dbh;
 while (f_pos < size){
  iinfo->i_alloc_type = ICBTAG_FLAG_AD_IN_ICB;
  sfi = udf_fileident_read(inode, &f_pos, &sfibh, &cfi, NULL,
      NULL, NULL, NULL);
  if (!sfi){
   brelse(dbh);
   return NULL;
  }
  iinfo->i_alloc_type = alloctype;
  sfi->descTag.tagLocation = cpu_to_le32(*block);
  dfibh.soffset = dfibh.eoffset;
  dfibh.eoffset += (sfibh.eoffset - sfibh.soffset);
  dfi = (struct fileIdentDesc *)(dbh->b_data + dfibh.soffset);
  if (udf_write_fi(inode, sfi, dfi, &dfibh, sfi->impUse,
     sfi->fileIdent +
     le16_to_cpu(sfi->lengthOfImpUse))){
   iinfo->i_alloc_type = ICBTAG_FLAG_AD_IN_ICB;
   brelse(dbh);
   return NULL;
  }
 }
 mark_buffer_dirty_inode(dbh, inode);

 memset(iinfo->i_ext.i_data + iinfo->i_lenEAttr, 0,
  iinfo->i_lenAlloc);
 iinfo->i_lenAlloc = 0;
 eloc.logicalBlockNum = *block;
 eloc.partitionReferenceNum =
    iinfo->i_location.partitionReferenceNum;
 iinfo->i_lenExtents = inode->i_size;
 epos.bh = NULL;
 epos.block = iinfo->i_location;
 epos.offset = udf_file_entry_alloc_offset(inode);
 udf_add_aext(inode, &epos, &eloc, inode->i_size, 0);


 brelse(epos.bh);
 mark_inode_dirty(inode);
 return dbh;
}
