ZEND_API zend_mm_heap *zend_mm_startup_ex(const zend_mm_handlers *handlers, void *data, size_t data_size){
#if ZEND_MM_STORAGE
 zend_mm_storage tmp_storage, *storage;
 zend_mm_chunk *chunk;
 zend_mm_heap *heap;

 memcpy((zend_mm_handlers*)&tmp_storage.handlers, handlers, sizeof(zend_mm_handlers));
 tmp_storage.data = data;
 chunk = (zend_mm_chunk*)handlers->chunk_alloc(&tmp_storage, ZEND_MM_CHUNK_SIZE, ZEND_MM_CHUNK_SIZE);
 if (UNEXPECTED(chunk == NULL)){
#if ZEND_MM_ERROR
#ifdef _WIN32
  stderr_last_error("Can't initialize heap");
#else
  fprintf(stderr, "\nCan't initialize heap: [%d] %s\n", errno, strerror(errno));
#endif
#endif
  return NULL;
 }
 heap = &chunk->heap_slot;
 chunk->heap = heap;
 chunk->next = chunk;
 chunk->prev = chunk;
 chunk->free_pages = ZEND_MM_PAGES - ZEND_MM_FIRST_PAGE;
 chunk->free_tail = ZEND_MM_FIRST_PAGE;
 chunk->num = 0;
 chunk->free_map[0] = (Z_L(1) << ZEND_MM_FIRST_PAGE) - 1;
 chunk->map[0] = ZEND_MM_LRUN(ZEND_MM_FIRST_PAGE);
 heap->main_chunk = chunk;
 heap->cached_chunks = NULL;
 heap->chunks_count = 1;
 heap->peak_chunks_count = 1;
 heap->cached_chunks_count = 0;
 heap->avg_chunks_count = 1.0;
#if ZEND_MM_STAT || ZEND_MM_LIMIT
 heap->real_size = ZEND_MM_CHUNK_SIZE;
#endif
#if ZEND_MM_STAT
 heap->real_peak = ZEND_MM_CHUNK_SIZE;
 heap->size = 0;
 heap->peak = 0;
#endif
#if ZEND_MM_LIMIT
 heap->limit = (Z_L(-1) >> Z_L(1));
 heap->overflow = 0;
#endif
#if ZEND_MM_CUSTOM
 heap->use_custom_heap = 0;
#endif
 heap->storage = &tmp_storage;
 heap->huge_list = NULL;
 memset(heap->free_slot, 0, sizeof(heap->free_slot));
 storage = _zend_mm_alloc(heap, sizeof(zend_mm_storage) + data_size ZEND_FILE_LINE_CC ZEND_FILE_LINE_CC);
 if (!storage){
  handlers->chunk_free(&tmp_storage, chunk, ZEND_MM_CHUNK_SIZE);
#if ZEND_MM_ERROR
#ifdef _WIN32
  stderr_last_error("Can't initialize heap");
#else
  fprintf(stderr, "\nCan't initialize heap: [%d] %s\n", errno, strerror(errno));
#endif
#endif
  return NULL;
 }
 memcpy(storage, &tmp_storage, sizeof(zend_mm_storage));
 if (data){
  storage->data = (void*)(((char*)storage + sizeof(zend_mm_storage)));
  memcpy(storage->data, data, data_size);
 }
 heap->storage = storage;
 return heap;
#else
 return NULL;
#endif
}
