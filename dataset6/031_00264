get_spec_stats (struct Spec_list *s){
  struct List_element *p;
  count length = 0;

  s->n_indefinite_repeats = 0;
  s->has_equiv_class = false;
  s->has_restricted_char_class = false;
  s->has_char_class = false;
  for (p = s->head->next; p; p = p->next){
      count len = 0;
      count new_length;

      switch (p->type){
        case RE_NORMAL_CHAR:
          len = 1;
          break;

        case RE_RANGE:
          assert (p->u.range.last_char >= p->u.range.first_char);
          len = p->u.range.last_char - p->u.range.first_char + 1;
          break;

        case RE_CHAR_CLASS:
          s->has_char_class = true;
          for (int i = 0; i < N_CHARS; i++)
            if (is_char_class_member (p->u.char_class, i))
              ++len;
          switch (p->u.char_class){
            case CC_UPPER:
            case CC_LOWER:
              break;
            default:
              s->has_restricted_char_class = true;
              break;
            }
          break;

        case RE_EQUIV_CLASS:
          for (int i = 0; i < N_CHARS; i++)
            if (is_equiv_class_member (p->u.equiv_code, i))
              ++len;
          s->has_equiv_class = true;
          break;

        case RE_REPEATED_CHAR:
          if (p->u.repeated_char.repeat_count > 0)
            len = p->u.repeated_char.repeat_count;
          else{
              s->indefinite_repeat_element = p;
              ++(s->n_indefinite_repeats);
            }
          break;

        default:
          abort ();
        }





      new_length = length + len;
      if (! (length <= new_length && new_length <= REPEAT_COUNT_MAXIMUM))
        die (EXIT_FAILURE, 0, _("too many characters in set"));
      length = new_length;
    }

  s->length = length;
}
