vc4_get_hang_state_ioctl(struct drm_device *dev, void *data,
    struct drm_file *file_priv){
 struct drm_vc4_get_hang_state *get_state = data;
 struct drm_vc4_get_hang_state_bo *bo_state;
 struct vc4_hang_state *kernel_state;
 struct drm_vc4_get_hang_state *state;
 struct vc4_dev *vc4 = to_vc4_dev(dev);
 unsigned long irqflags;
 u32 i;
 int ret = 0;

 spin_lock_irqsave(&vc4->job_lock, irqflags);
 kernel_state = vc4->hang_state;
 if (!kernel_state){
  spin_unlock_irqrestore(&vc4->job_lock, irqflags);
  return -ENOENT;
 }
 state = &kernel_state->user_state;




 if (get_state->bo_count < state->bo_count){
  get_state->bo_count = state->bo_count;
  spin_unlock_irqrestore(&vc4->job_lock, irqflags);
  return 0;
 }

 vc4->hang_state = NULL;
 spin_unlock_irqrestore(&vc4->job_lock, irqflags);


 state->bo = get_state->bo;
 memcpy(get_state, state, sizeof(*state));

 bo_state = kcalloc(state->bo_count, sizeof(*bo_state), GFP_KERNEL);
 if (!bo_state){
  ret = -ENOMEM;
  goto err_free;
 }

 for (i = 0; i < state->bo_count; i++){
  struct vc4_bo *vc4_bo = to_vc4_bo(kernel_state->bo[i]);
  u32 handle;

  ret = drm_gem_handle_create(file_priv, kernel_state->bo[i],
         &handle);

  if (ret){
   state->bo_count = i - 1;
   goto err;
  }
  bo_state[i].handle = handle;
  bo_state[i].paddr = vc4_bo->base.paddr;
  bo_state[i].size = vc4_bo->base.base.size;
 }

 if (copy_to_user((void __user *)(uintptr_t)get_state->bo,
    bo_state,
    state->bo_count * sizeof(*bo_state)))
  ret = -EFAULT;

 kfree(bo_state);

err_free:

 vc4_free_hang_state(dev, kernel_state);

err:
 return ret;
}
