void register_console(struct console *newcon){
 int i;
 unsigned long flags;
 struct console *bcon = NULL;





 if (console_drivers && newcon->flags & CON_BOOT){

  for_each_console(bcon){
   if (!(bcon->flags & CON_BOOT)){
    printk(KERN_INFO "Too late to register bootconsole %s%d\n",
     newcon->name, newcon->index);
    return;
   }
  }
 }

 if (console_drivers && console_drivers->flags & CON_BOOT)
  bcon = console_drivers;

 if (preferred_console < 0 || bcon || !console_drivers)
  preferred_console = selected_console;

 if (newcon->early_setup)
  newcon->early_setup();






 if (preferred_console < 0){
  if (newcon->index < 0)
   newcon->index = 0;
  if (newcon->setup == NULL ||
      newcon->setup(newcon, NULL) == 0){
   newcon->flags |= CON_ENABLED;
   if (newcon->device){
    newcon->flags |= CON_CONSDEV;
    preferred_console = 0;
   }
  }
 }





 for (i = 0; i < MAX_CMDLINECONSOLES && console_cmdline[i].name[0];
   i++){
  if (strcmp(console_cmdline[i].name, newcon->name) != 0)
   continue;
  if (newcon->index >= 0 &&
      newcon->index != console_cmdline[i].index)
   continue;
  if (newcon->index < 0)
   newcon->index = console_cmdline[i].index;
#ifdef CONFIG_A11Y_BRAILLE_CONSOLE
  if (console_cmdline[i].brl_options){
   newcon->flags |= CON_BRL;
   braille_register_console(newcon,
     console_cmdline[i].index,
     console_cmdline[i].options,
     console_cmdline[i].brl_options);
   return;
  }
#endif
  if (newcon->setup &&
      newcon->setup(newcon, console_cmdline[i].options) != 0)
   break;
  newcon->flags |= CON_ENABLED;
  newcon->index = console_cmdline[i].index;
  if (i == selected_console){
   newcon->flags |= CON_CONSDEV;
   preferred_console = selected_console;
  }
  break;
 }

 if (!(newcon->flags & CON_ENABLED))
  return;







 if (bcon && ((newcon->flags & (CON_CONSDEV | CON_BOOT)) == CON_CONSDEV))
  newcon->flags &= ~CON_PRINTBUFFER;





 console_lock();
 if ((newcon->flags & CON_CONSDEV) || console_drivers == NULL){
  newcon->next = console_drivers;
  console_drivers = newcon;
  if (newcon->next)
   newcon->next->flags &= ~CON_CONSDEV;
 } else{
  newcon->next = console_drivers->next;
  console_drivers->next = newcon;
 }
 if (newcon->flags & CON_PRINTBUFFER){




  raw_spin_lock_irqsave(&logbuf_lock, flags);
  con_start = log_start;
  raw_spin_unlock_irqrestore(&logbuf_lock, flags);





  exclusive_console = newcon;
 }
 console_unlock();
 console_sysfs_notify();
# 1571 "originals/45a.c"
 if (bcon &&
     ((newcon->flags & (CON_CONSDEV | CON_BOOT)) == CON_CONSDEV) &&
     !keep_bootcon){



  printk(KERN_INFO "console [%s%d] enabled, bootconsole disabled\n",
   newcon->name, newcon->index);
  for_each_console(bcon)
   if (bcon->flags & CON_BOOT)
    unregister_console(bcon);
 } else{
  printk(KERN_INFO "%sconsole [%s%d] enabled\n",
   (newcon->flags & CON_BOOT) ? "boot" : "" ,
   newcon->name, newcon->index);
 }
}
