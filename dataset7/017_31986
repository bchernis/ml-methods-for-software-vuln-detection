static int _nfs4_server_capabilities(struct nfs_server *server, struct nfs_fh *fhandle){
 struct nfs4_server_caps_arg args ={
  .fhandle = fhandle,
 };
 struct nfs4_server_caps_res res ={};
 struct rpc_message msg ={
  .rpc_proc = &nfs4_procedures[NFSPROC4_CLNT_SERVER_CAPS],
  .rpc_argp = &args,
  .rpc_resp = &res,
 };
 int status;

 status = nfs4_call_sync(server->client, server, &msg, &args.seq_args, &res.seq_res, 0);
 if (status == 0){
  memcpy(server->attr_bitmask, res.attr_bitmask, sizeof(server->attr_bitmask));
  server->caps &= ~(NFS_CAP_ACLS|NFS_CAP_HARDLINKS|
    NFS_CAP_SYMLINKS|NFS_CAP_FILEID|
    NFS_CAP_MODE|NFS_CAP_NLINK|NFS_CAP_OWNER|
    NFS_CAP_OWNER_GROUP|NFS_CAP_ATIME|
    NFS_CAP_CTIME|NFS_CAP_MTIME);
  if (res.attr_bitmask[0] & FATTR4_WORD0_ACL)
   server->caps |= NFS_CAP_ACLS;
  if (res.has_links != 0)
   server->caps |= NFS_CAP_HARDLINKS;
  if (res.has_symlinks != 0)
   server->caps |= NFS_CAP_SYMLINKS;
  if (res.attr_bitmask[0] & FATTR4_WORD0_FILEID)
   server->caps |= NFS_CAP_FILEID;
  if (res.attr_bitmask[1] & FATTR4_WORD1_MODE)
   server->caps |= NFS_CAP_MODE;
  if (res.attr_bitmask[1] & FATTR4_WORD1_NUMLINKS)
   server->caps |= NFS_CAP_NLINK;
  if (res.attr_bitmask[1] & FATTR4_WORD1_OWNER)
   server->caps |= NFS_CAP_OWNER;
  if (res.attr_bitmask[1] & FATTR4_WORD1_OWNER_GROUP)
   server->caps |= NFS_CAP_OWNER_GROUP;
  if (res.attr_bitmask[1] & FATTR4_WORD1_TIME_ACCESS)
   server->caps |= NFS_CAP_ATIME;
  if (res.attr_bitmask[1] & FATTR4_WORD1_TIME_METADATA)
   server->caps |= NFS_CAP_CTIME;
  if (res.attr_bitmask[1] & FATTR4_WORD1_TIME_MODIFY)
   server->caps |= NFS_CAP_MTIME;

  memcpy(server->cache_consistency_bitmask, res.attr_bitmask, sizeof(server->cache_consistency_bitmask));
  server->cache_consistency_bitmask[0] &= FATTR4_WORD0_CHANGE|FATTR4_WORD0_SIZE;
  server->cache_consistency_bitmask[1] &= FATTR4_WORD1_TIME_METADATA|FATTR4_WORD1_TIME_MODIFY;
  server->acl_bitmask = res.acl_bitmask;
  server->fh_expire_type = res.fh_expire_type;
 }

 return status;
}
