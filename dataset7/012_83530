sg_add_sfp(Sg_device * sdp){
 Sg_fd *sfp;
 unsigned long iflags;
 int bufflen;

 sfp = kzalloc(sizeof(*sfp), GFP_ATOMIC | __GFP_NOWARN);
 if (!sfp)
  return ERR_PTR(-ENOMEM);

 init_waitqueue_head(&sfp->read_wait);
 rwlock_init(&sfp->rq_list_lock);

 kref_init(&sfp->f_ref);
 sfp->timeout = SG_DEFAULT_TIMEOUT;
 sfp->timeout_user = SG_DEFAULT_TIMEOUT_USER;
 sfp->force_packid = SG_DEF_FORCE_PACK_ID;
 sfp->low_dma = (SG_DEF_FORCE_LOW_DMA == 0) ?
     sdp->device->host->unchecked_isa_dma : 1;
 sfp->cmd_q = SG_DEF_COMMAND_Q;
 sfp->keep_orphan = SG_DEF_KEEP_ORPHAN;
 sfp->parentdp = sdp;
 write_lock_irqsave(&sdp->sfd_lock, iflags);
 if (atomic_read(&sdp->detaching)){
  write_unlock_irqrestore(&sdp->sfd_lock, iflags);
  return ERR_PTR(-ENODEV);
 }
 list_add_tail(&sfp->sfd_siblings, &sdp->sfds);
 write_unlock_irqrestore(&sdp->sfd_lock, iflags);
 SCSI_LOG_TIMEOUT(3, sg_printk(KERN_INFO, sdp,
          "sg_add_sfp: sfp=0x%p\n", sfp));
 if (unlikely(sg_big_buff != def_reserved_size))
  sg_big_buff = def_reserved_size;

 bufflen = min_t(int, sg_big_buff,
   max_sectors_bytes(sdp->device->request_queue));
 sg_build_reserve(sfp, bufflen);
 SCSI_LOG_TIMEOUT(3, sg_printk(KERN_INFO, sdp,
          "sg_add_sfp: bufflen=%d, k_use_sg=%d\n",
          sfp->reserve.bufflen,
          sfp->reserve.k_use_sg));

 kref_get(&sdp->d_ref);
 __module_get(THIS_MODULE);
 return sfp;
}
