spell_read_wordfile(spellinfo_T *spin, char_u *fname){
    FILE *fd;
    long lnum = 0;
    char_u rline[MAXLINELEN];
    char_u *line;
    char_u *pc = NULL;
    char_u *p;
    int l;
    int retval = OK;
    int did_word = FALSE;
    int non_ascii = 0;
    int flags;
    int regionmask;




    fd = mch_fopen((char *)fname, "r");
    if (fd == NULL){
 EMSG2(_(e_notopen), fname);
 return FAIL;
    }

    vim_snprintf((char *)IObuff, IOSIZE, _("Reading word file %s ..."), fname);
    spell_message(spin, IObuff);




    while (!vim_fgets(rline, MAXLINELEN, fd) && !got_int){
 line_breakcheck();
 ++lnum;


 if (*rline == '#')
     continue;


 l = (int)STRLEN(rline);
 while (l > 0 && rline[l - 1] <= ' ')
     --l;
 if (l == 0)
     continue;
 rline[l] = NUL;


 vim_free(pc);
#ifdef FEAT_MBYTE
 if (spin->si_conv.vc_type != CONV_NONE){
     pc = string_convert(&spin->si_conv, rline, NULL);
     if (pc == NULL){
  smsg((char_u *)_("Conversion failure for word in %s line %d: %s"),
          fname, lnum, rline);
  continue;
     }
     line = pc;
 }
 else
#endif{
     pc = NULL;
     line = rline;
 }

 if (*line == '/'){
     ++line;
     if (STRNCMP(line, "encoding=", 9) == 0){
  if (spin->si_conv.vc_type != CONV_NONE)
      smsg((char_u *)_("Duplicate /encoding= line ignored in %s line %d: %s"),
             fname, lnum, line - 1);
  else if (did_word)
      smsg((char_u *)_("/encoding= line after word ignored in %s line %d: %s"),
             fname, lnum, line - 1);
  else{
#ifdef FEAT_MBYTE
      char_u *enc;


      line += 9;
      enc = enc_canonize(line);
      if (enc != NULL && !spin->si_ascii
       && convert_setup(&spin->si_conv, enc,
              p_enc) == FAIL)
   smsg((char_u *)_("Conversion in %s not supported: from %s to %s"),
         fname, line, p_enc);
      vim_free(enc);
      spin->si_conv.vc_fail = TRUE;
#else
      smsg((char_u *)_("Conversion in %s not supported"), fname);
#endif
  }
  continue;
     }

     if (STRNCMP(line, "regions=", 8) == 0){
  if (spin->si_region_count > 1)
      smsg((char_u *)_("Duplicate /regions= line ignored in %s line %d: %s"),
             fname, lnum, line);
  else{
      line += 8;
      if (STRLEN(line) > 16)
   smsg((char_u *)_("Too many regions in %s line %d: %s"),
             fname, lnum, line);
      else{
   spin->si_region_count = (int)STRLEN(line) / 2;
   STRCPY(spin->si_region_name, line);


   spin->si_region = (1 << spin->si_region_count) - 1;
      }
  }
  continue;
     }

     smsg((char_u *)_("/ line ignored in %s line %d: %s"),
             fname, lnum, line - 1);
     continue;
 }

 flags = 0;
 regionmask = spin->si_region;


 p = vim_strchr(line, '/');
 if (p != NULL){
     *p++ = NUL;
     while (*p != NUL){
  if (*p == '=')
      flags |= WF_KEEPCAP | WF_FIXCAP;
  else if (*p == '!')
      flags |= WF_BANNED;
  else if (*p == '?')
      flags |= WF_RARE;
  else if (VIM_ISDIGIT(*p)){
      if ((flags & WF_REGION) == 0)
   regionmask = 0;
      flags |= WF_REGION;

      l = *p - '0';
      if (l > spin->si_region_count){
   smsg((char_u *)_("Invalid region nr in %s line %d: %s"),
         fname, lnum, p);
   break;
      }
      regionmask |= 1 << (l - 1);
  }
  else{
      smsg((char_u *)_("Unrecognized flags in %s line %d: %s"),
             fname, lnum, p);
      break;
  }
  ++p;
     }
 }


 if (spin->si_ascii && has_non_ascii(line)){
     ++non_ascii;
     continue;
 }


 if (store_word(spin, line, flags, regionmask, NULL, FALSE) == FAIL){
     retval = FAIL;
     break;
 }
 did_word = TRUE;
    }

    vim_free(pc);
    fclose(fd);

    if (spin->si_ascii && non_ascii > 0){
 vim_snprintf((char *)IObuff, IOSIZE,
    _("Ignored %d words with non-ASCII characters"), non_ascii);
 spell_message(spin, IObuff);
    }

    return retval;
}
