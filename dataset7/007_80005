int32_t WelsRequestMem (PWelsDecoderContext pCtx, const int32_t kiMbWidth, const int32_t kiMbHeight){
  const int32_t kiPicWidth = kiMbWidth << 4;
  const int32_t kiPicHeight = kiMbHeight << 4;
  int32_t iErr = ERR_NONE;

  int32_t iListIdx = 0;
  int32_t iPicQueueSize = 0;
  bool bNeedChangePicQueue = true;

  WELS_VERIFY_RETURN_IF (ERR_INFO_INVALID_PARAM, (NULL == pCtx || kiPicWidth <= 0 || kiPicHeight <= 0))



  iPicQueueSize = GetTargetRefListSize (pCtx);
  pCtx->iPicQueueNumber = iPicQueueSize;
  if (pCtx->pPicBuff[LIST_0] != NULL
      && pCtx->pPicBuff[LIST_0]->iCapacity ==
      iPicQueueSize)
    bNeedChangePicQueue = false;

  WELS_VERIFY_RETURN_IF (ERR_NONE, pCtx->bHaveGotMemory && (kiPicWidth == pCtx->iImgWidthInPixel
                         && kiPicHeight == pCtx->iImgHeightInPixel) && (!bNeedChangePicQueue))


  WelsResetRefPic (pCtx);


  for (iListIdx = LIST_0; iListIdx < LIST_A; ++ iListIdx){
    PPicBuff* ppPic = &pCtx->pPicBuff[iListIdx];
    if (NULL != ppPic && NULL != *ppPic){
      DestroyPicBuff (ppPic);
    }
  }


  iErr = CreatePicBuff (pCtx, &pCtx->pPicBuff[LIST_0], iPicQueueSize, kiPicWidth, kiPicHeight);
  if (iErr != ERR_NONE)
    return iErr;


  pCtx->iImgWidthInPixel = kiPicWidth;
  pCtx->iImgHeightInPixel = kiPicHeight;

  pCtx->bHaveGotMemory = true;
  pCtx->pDec = NULL;
  return ERR_NONE;
}
