static zend_always_inline zval *_zend_hash_add_or_update_i(HashTable *ht, zend_string *key, zval *pData, uint32_t flag ZEND_FILE_LINE_DC){
 zend_ulong h;
 uint32_t nIndex;
 uint32_t idx;
 Bucket *p;

 IS_CONSISTENT(ht);
 HT_ASSERT(GC_REFCOUNT(ht) == 1);

 if (UNEXPECTED(!(ht->u.flags & HASH_FLAG_INITIALIZED))){
  CHECK_INIT(ht, 0);
  goto add_to_hash;
 } else if (ht->u.flags & HASH_FLAG_PACKED){
  zend_hash_packed_to_hash(ht);
 } else if ((flag & HASH_ADD_NEW) == 0){
  p = zend_hash_find_bucket(ht, key);

  if (p){
   zval *data;

   if (flag & HASH_ADD){
    if (!(flag & HASH_UPDATE_INDIRECT)){
     return NULL;
    }
    ZEND_ASSERT(&p->val != pData);
    data = &p->val;
    if (Z_TYPE_P(data) == IS_INDIRECT){
     data = Z_INDIRECT_P(data);
     if (Z_TYPE_P(data) != IS_UNDEF){
      return NULL;
     }
    } else{
     return NULL;
    }
   } else{
    ZEND_ASSERT(&p->val != pData);
    data = &p->val;
    if ((flag & HASH_UPDATE_INDIRECT) && Z_TYPE_P(data) == IS_INDIRECT){
     data = Z_INDIRECT_P(data);
    }
   }
   HANDLE_BLOCK_INTERRUPTIONS();
   if (ht->pDestructor){
    ht->pDestructor(data);
   }
   ZVAL_COPY_VALUE(data, pData);
   HANDLE_UNBLOCK_INTERRUPTIONS();
   return data;
  }
 }

 ZEND_HASH_IF_FULL_DO_RESIZE(ht);

add_to_hash:
 HANDLE_BLOCK_INTERRUPTIONS();
 idx = ht->nNumUsed++;
 ht->nNumOfElements++;
 if (ht->nInternalPointer == HT_INVALID_IDX){
  ht->nInternalPointer = idx;
 }
 zend_hash_iterators_update(ht, HT_INVALID_IDX, idx);
 p = ht->arData + idx;
 p->key = key;
 if (!ZSTR_IS_INTERNED(key)){
  zend_string_addref(key);
  ht->u.flags &= ~HASH_FLAG_STATIC_KEYS;
  zend_string_hash_val(key);
 }
 p->h = h = ZSTR_H(key);
 ZVAL_COPY_VALUE(&p->val, pData);
 nIndex = h | ht->nTableMask;
 Z_NEXT(p->val) = HT_HASH(ht, nIndex);
 HT_HASH(ht, nIndex) = HT_IDX_TO_HASH(idx);
 HANDLE_UNBLOCK_INTERRUPTIONS();

 return &p->val;
}
