int kvm_arch_vcpu_ioctl_get_sregs(struct kvm_vcpu *vcpu,
      struct kvm_sregs *sregs){
 struct desc_ptr dt;

 kvm_get_segment(vcpu, &sregs->cs, VCPU_SREG_CS);
 kvm_get_segment(vcpu, &sregs->ds, VCPU_SREG_DS);
 kvm_get_segment(vcpu, &sregs->es, VCPU_SREG_ES);
 kvm_get_segment(vcpu, &sregs->fs, VCPU_SREG_FS);
 kvm_get_segment(vcpu, &sregs->gs, VCPU_SREG_GS);
 kvm_get_segment(vcpu, &sregs->ss, VCPU_SREG_SS);

 kvm_get_segment(vcpu, &sregs->tr, VCPU_SREG_TR);
 kvm_get_segment(vcpu, &sregs->ldt, VCPU_SREG_LDTR);

 kvm_x86_ops->get_idt(vcpu, &dt);
 sregs->idt.limit = dt.size;
 sregs->idt.base = dt.address;
 kvm_x86_ops->get_gdt(vcpu, &dt);
 sregs->gdt.limit = dt.size;
 sregs->gdt.base = dt.address;

 sregs->cr0 = kvm_read_cr0(vcpu);
 sregs->cr2 = vcpu->arch.cr2;
 sregs->cr3 = kvm_read_cr3(vcpu);
 sregs->cr4 = kvm_read_cr4(vcpu);
 sregs->cr8 = kvm_get_cr8(vcpu);
 sregs->efer = vcpu->arch.efer;
 sregs->apic_base = kvm_get_apic_base(vcpu);

 memset(sregs->interrupt_bitmap, 0, sizeof sregs->interrupt_bitmap);

 if (vcpu->arch.interrupt.pending && !vcpu->arch.interrupt.soft)
  set_bit(vcpu->arch.interrupt.nr,
   (unsigned long *)sregs->interrupt_bitmap);

 return 0;
}
