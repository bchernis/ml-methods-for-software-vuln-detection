void CLASS foveon_thumb(){
  int bwide;
  unsigned row, col, bitbuf=0, bit=1, c, i;
  char *buf;
  struct decode *dindex;
  short pred[3];

  bwide = get4();
  fprintf (ofp, "P6\n%d %d\n255\n", thumb_width, thumb_height);
  if (bwide > 0){
    if (bwide < thumb_width*3) return;
    buf = (char *) malloc (bwide);
    merror (buf, "foveon_thumb()");
    for (row=0; row < thumb_height; row++){
      fread (buf, 1, bwide, ifp);
      fwrite (buf, 3, thumb_width, ofp);
    }
    free (buf);
    return;
  }
  foveon_decoder (256, 0);

  for (row=0; row < thumb_height; row++){
    memset (pred, 0, sizeof pred);
    if (!bit) get4();
    for (bit=col=0; col < thumb_width; col++)
      FORC3{
 for (dindex=first_decode; dindex->branch[0]; ){
   if ((bit = (bit-1) & 31) == 31)
     for (i=0; i < 4; i++)
       bitbuf = (bitbuf << 8) + fgetc(ifp);
   dindex = dindex->branch[bitbuf >> bit & 1];
 }
 pred[c] += dindex->leaf;
 fputc (pred[c], ofp);
      }
  }
}
