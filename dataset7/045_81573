void CLASS smal_decode_segment (unsigned seg[2][2], int holes){
  uchar hist[3][13] ={{ 7, 7, 0, 0, 63, 55, 47, 39, 31, 23, 15, 7, 0 },{ 7, 7, 0, 0, 63, 55, 47, 39, 31, 23, 15, 7, 0 },{ 3, 3, 0, 0, 63, 47, 31, 15, 0 } };
  int low, high=0xff, carry=0, nbits=8;
  int s, count, bin, next, i, sym[3];
  uchar diff, pred[]={0,0};
  ushort data=0, range=0;
  unsigned pix, row, col;

  fseek (ifp, seg[0][1]+1, SEEK_SET);
  getbits(-1);
  for (pix=seg[0][0]; pix < seg[1][0]; pix++){
    for (s=0; s < 3; s++){
      data = data << nbits | getbits(nbits);
      if (carry < 0)
 carry = (nbits += carry+1) < 1 ? nbits-1 : 0;
      while (--nbits >= 0)
 if ((data >> nbits & 0xff) == 0xff) break;
      if (nbits > 0)
   data = ((data & ((1 << (nbits-1)) - 1)) << 1) |
 ((data + (((data & (1 << (nbits-1)))) << 1)) & (-1 << nbits));
      if (nbits >= 0){
 data += getbits(1);
 carry = nbits - 8;
      }
      count = ((((data-range+1) & 0xffff) << 2) - 1) / (high >> 4);
      for (bin=0; hist[s][bin+5] > count; bin++);
  low = hist[s][bin+5] * (high >> 4) >> 2;
      if (bin) high = hist[s][bin+4] * (high >> 4) >> 2;
      high -= low;
      for (nbits=0; high << nbits < 128; nbits++);
      range = (range+low) << nbits;
      high <<= nbits;
      next = hist[s][1];
      if (++hist[s][2] > hist[s][3]){
 next = (next+1) & hist[s][0];
 hist[s][3] = (hist[s][next+4] - hist[s][next+5]) >> 2;
 hist[s][2] = 1;
      }
      if (hist[s][hist[s][1]+4] - hist[s][hist[s][1]+5] > 1){
 if (bin < hist[s][1])
   for (i=bin; i < hist[s][1]; i++) hist[s][i+5]--;
 else if (next <= bin)
   for (i=hist[s][1]; i < bin; i++) hist[s][i+5]++;
      }
      hist[s][1] = next;
      sym[s] = bin;
    }
    diff = sym[2] << 5 | sym[1] << 2 | (sym[0] & 3);
    if (sym[0] & 4)
      diff = diff ? -diff : 0x80;
    if ((unsigned) ftell(ifp) + 12 >= seg[1][1])
      diff = 0;
    pred[pix & 1] += diff;
    row = pix / raw_width - top_margin;
    col = pix % raw_width - left_margin;
    if (row < height && col < width)
      BAYER(row,col) = pred[pix & 1];
    if (!(pix & 1) && HOLE(row)) pix += 2;
  }
  maximum = 0xff;
}
