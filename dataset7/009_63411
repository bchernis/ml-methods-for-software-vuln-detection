ves_icall_System_Environment_GetEnvironmentVariableNames (void){
#ifdef PLATFORM_WIN32
 MonoArray *names;
 MonoDomain *domain;
 MonoString *str;
 WCHAR* env_strings;
 WCHAR* env_string;
 WCHAR* equal_str;
 int n = 0;

 env_strings = GetEnvironmentStrings();

 if (env_strings){
  env_string = env_strings;
  while (*env_string != '\0'){

   if (*env_string != '=')
    n++;
   while (*env_string != '\0')
    env_string++;
   env_string++;
  }
 }

 domain = mono_domain_get ();
 names = mono_array_new (domain, mono_defaults.string_class, n);

 if (env_strings){
  n = 0;
  env_string = env_strings;
  while (*env_string != '\0'){

   if (*env_string != '='){
    equal_str = wcschr(env_string, '=');
    g_assert(equal_str);
    str = mono_string_new_utf16 (domain, env_string, equal_str-env_string);
    mono_array_setref (names, n, str);
    n++;
   }
   while (*env_string != '\0')
    env_string++;
   env_string++;
  }

  FreeEnvironmentStrings (env_strings);
 }

 return names;

#else
 MonoArray *names;
 MonoDomain *domain;
 MonoString *str;
 gchar **e, **parts;
 int n;

 MONO_ARCH_SAVE_REGS;

 n = 0;
 for (e = environ; *e != 0; ++ e)
  ++ n;

 domain = mono_domain_get ();
 names = mono_array_new (domain, mono_defaults.string_class, n);

 n = 0;
 for (e = environ; *e != 0; ++ e){
  parts = g_strsplit (*e, "=", 2);
  if (*parts != 0){
   str = mono_string_new (domain, *parts);
   mono_array_setref (names, n, str);
  }

  g_strfreev (parts);

  ++ n;
 }

 return names;
#endif
}
