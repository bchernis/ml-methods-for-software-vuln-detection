static void *zend_mm_alloc_huge(zend_mm_heap *heap, size_t size ZEND_FILE_LINE_DC ZEND_FILE_LINE_ORIG_DC){
#ifdef ZEND_WIN32




 size_t new_size = ZEND_MM_ALIGNED_SIZE_EX(size, MAX(REAL_PAGE_SIZE, ZEND_MM_CHUNK_SIZE));
#else
 size_t new_size = ZEND_MM_ALIGNED_SIZE_EX(size, REAL_PAGE_SIZE);
#endif
 void *ptr;

#if ZEND_MM_LIMIT
 if (UNEXPECTED(heap->real_size + new_size > heap->limit)){
  if (zend_mm_gc(heap) && heap->real_size + new_size <= heap->limit){

  } else if (heap->overflow == 0){
#if ZEND_DEBUG
   zend_mm_safe_error(heap, "Allowed memory size of %zu bytes exhausted at %s:%d (tried to allocate %zu bytes)", heap->limit, __zend_filename, __zend_lineno, size);
#else
   zend_mm_safe_error(heap, "Allowed memory size of %zu bytes exhausted (tried to allocate %zu bytes)", heap->limit, size);
#endif
   return NULL;
  }
 }
#endif
 ptr = zend_mm_chunk_alloc(heap, new_size, ZEND_MM_CHUNK_SIZE);
 if (UNEXPECTED(ptr == NULL)){

  if (zend_mm_gc(heap) &&
      (ptr = zend_mm_chunk_alloc(heap, new_size, ZEND_MM_CHUNK_SIZE)) != NULL){

  } else{
#if !ZEND_MM_LIMIT
   zend_mm_safe_error(heap, "Out of memory");
#elif ZEND_DEBUG
   zend_mm_safe_error(heap, "Out of memory (allocated %zu) at %s:%d (tried to allocate %zu bytes)", heap->real_size, __zend_filename, __zend_lineno, size);
#else
   zend_mm_safe_error(heap, "Out of memory (allocated %zu) (tried to allocate %zu bytes)", heap->real_size, size);
#endif
   return NULL;
  }
 }
#if ZEND_DEBUG
 zend_mm_add_huge_block(heap, ptr, new_size, size ZEND_FILE_LINE_RELAY_CC ZEND_FILE_LINE_ORIG_RELAY_CC);
#else
 zend_mm_add_huge_block(heap, ptr, new_size ZEND_FILE_LINE_RELAY_CC ZEND_FILE_LINE_ORIG_RELAY_CC);
#endif
#if ZEND_MM_STAT
 do{
  size_t size = heap->real_size + new_size;
  size_t peak = MAX(heap->real_peak, size);
  heap->real_size = size;
  heap->real_peak = peak;
 } while (0);
 do{
  size_t size = heap->size + new_size;
  size_t peak = MAX(heap->peak, size);
  heap->size = size;
  heap->peak = peak;
 } while (0);
#elif ZEND_MM_LIMIT
 heap->real_size += new_size;
#endif
 return ptr;
}
